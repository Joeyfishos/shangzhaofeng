class Solution:
    # @param {string} digits
    # @return {string[]}
    def letterCombinations(self, digits):
        from functools import reduce

        form = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
                   '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz','1':[]}

        def iterate(a, b,aa=form):
            sum = []
            if a in a:
                for i in aa[a]:
                    for j in aa[b]:
                        k = i + j
                        sum.append(k)
                return sum
            else:
                for i in a:
                    for j in aa[b]:
                        k = i + j
                        sum.append(k)
                return sum
        if len(digits) == 0:
            return []
        elif len(digits) == 1:
            return list(form[digits[0]])
        elif len(digits)>1:
            ans=reduce(iterate,list(digits))  # use the reduce function, because the prior two number as the next turns first value
            return ans

        

        

# class Solution:
#     # @param {string} digits
#     # @return {string[]}
#     def letterCombinations(self, digits):
#         mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
#                    '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
#         if len(digits) == 0:
#             return []
#         if len(digits) == 1:
#             return list(mapping[digits[0]])
#         prev = self.letterCombinations(digits[:-1])
#         additional = mapping[digits[-1]]
#         return [s + c for s in prev for c in additional]    # use recursion in a inverted way
