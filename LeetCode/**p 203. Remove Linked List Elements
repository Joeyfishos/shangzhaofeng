/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        ListNode* temp=head,*ans;
        if(!temp)
        {
            return head;
        }
        while(temp&&temp->val==val)
        {
            temp=temp->next;
        }
        head=temp;
        ans=head;
        if(!head)
        {
            return head;
        }
        while(temp->next)
        {
            if(temp->next->val!=val)
            {
                temp=temp->next;
                head->next=temp;
                head=head->next;
            }
            else if(temp->next->val==val&&temp->next->next)
            {
                temp=temp->next;
            }
            else if(temp->next->val==val&&!temp->next->next)
            {
                head->next=NULL;
                break;
            }

        }
                   
        return ans;
    }
};


// class Solution {
// public:
//     ListNode* removeElements(ListNode* head, int val) {
//         ListNode* temp = new ListNode(0);
//         temp->next = head;
        
//         ListNode* current = temp;
//         while (current->next) {
//             if (current->next->val == val)
//                 current->next = current->next->next;
//             else
//                 current = current->next;
//         }
        
//         return temp->next;
//     }
// };

// 双重指针，关键是让**list锁住next的地址，因为next也是个指针，可以将指针得地址给**list， list=&(head->next)是这个next框指针的地址，*list为指针所指的东西，若为6，则 *list = (*list)->next，是这个next指针指向下一个的next，也就是跳两个。
// ListNode *removeElements(ListNode *head, int val)
// {
//     ListNode **list = &head;

//     while (*list != nullptr)
//     {
//         if ((*list)->val == val)# 如果head的val不对，则不存&head了，存&(head->next)
//         {
//             *list = (*list)->next;   #1，2，3 list村的是1的next的地址，*list->val表示的是2.如果对，则1指向2的next就是3，2删除了
//         }
//         else
//         {
//             list = &(*list)->next;    #list=&(head->next)  地址是没有next的，只有是head的next的地址
//         }
//     }

//     return head;
// }
